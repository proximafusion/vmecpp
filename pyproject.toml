[build-system]
requires = ["hatchling", "hatch-build-scripts"]
build-backend = "hatchling.build"

[project]
name = "vmecpp"
dynamic = ["version"]
description = "Proxima Fusion's reimplementation of the Variational Moments Equilibrium Code (VMEC), a free-boundary ideal-MHD equilibrium solver for stellarators and Tokamaks."
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [
  { name = "Jonathan Schilling", email = "jons@proximafusion.com" },
  { name = "Enrico Guiraud", email = "eguiraud@proximafusion.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = []

[project.urls]
Documentation = "https://github.com/proximafusion/vmecpp#readme"
Issues = "https://github.com/proximafusion/vmecpp/issues"
Source = "https://github.com/proximafusion/vmecpp"

[tool.hatch.version]
path = "src/vmecpp/__about__.py"

# NOTE(eguiraud): this produces two copies of the extension module,
# but I could not convince hatch to do otherwise. We only copy one
# of the two into the wheel.
[[tool.hatch.build.hooks.build-scripts.scripts]]
work_dir = "src/vmecpp/cpp/"
out_dir = "src/vmecpp/cpp/bazel_artifacts/"
commands = [
  # the build is CPU-intensive, so we limit the amount of jobs to less
  # than the number of CPUs in order to not completely hog the machine
  "bazel build --jobs='HOST_CPUS*.75' //...",
  "cp -f bazel-bin/vmecpp/vmec/pybind11/_vmecpp.so _vmecpp.so",
]
artifacts = [
    "_vmecpp.so",
]

[tool.hatch.build.targets.wheel]
artifacts = [
  "src/vmecpp/cpp/_vmecpp.so",
]

[tool.coverage.run]
source_pkgs = ["vmecpp", "tests"]
branch = true
parallel = true
omit = [
  "src/vmecpp/__about__.py",
]

[tool.coverage.paths]
vmecpp = ["src/vmecpp", "*/vmecpp/src/vmecpp"]
tests = ["tests", "*/vmecpp/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 88

[tool.ruff.lint]
extend-select = [
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  "FURB",     # refurb
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "PYI",      # flake8-pyi
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
]
ignore = [
  "ISC001",   # Conflicts with formatter
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "F722",     # Disable 'forward-annotation-syntax-error' for jaxtyping compatibility, see https://docs.kidger.site/jaxtyping/faq/#flake8-or-ruff-are-throwing-an-error
  "UP037",    # Incompatible with jaxtyping type annotations
  "PGH003",   # We don't want to use specific code rules in `pyright: ignore`, too much of a hassle
]
typing-modules = ["mypackage._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]

[tool.docformatter]
black = true  # Enables mode that plays nice with black, e.g. sets line length to 88.
