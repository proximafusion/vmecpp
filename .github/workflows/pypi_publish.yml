name: Publish wheels to PyPI

on:
  # allows running workflows manually
  workflow_dispatch:

  release:
    types: [published]

jobs:
  main:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: manylinux_x86_64
          - os: macos-13
            arch: macosx_x86_64
          - os: macos-14
            arch: macosx_arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.0
        env:
          CIBW_BUILD: "cp*-${{ matrix.arch }}"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_MANYLINUX_X86_64_IMAGE: quay.io/pypa/manylinux2014_x86_64
          CIBW_MUSLLINUX_X86_64_IMAGE: quay.io/pypa/musllinux_1_2_x86_64
          CIBW_ARCHS_MACOS: "native"
          CIBW_BUILD_FRONTEND: "build"
          CIBW_BEFORE_BUILD_LINUX: |
            yum install -y libgomp eigen3-devel lapack-devel json-devel netcdf-devel hdf5-devel
          CIBW_BEFORE_BUILD_MACOS: |
            brew install gcc libomp eigen lapack nlohmann-json protobuf netcdf hdf5
          CIBW_ENVIRONMENT_MACOS: >
            MACOSX_DEPLOYMENT_TARGET=${{ matrix.os == 'macos-14' && '14.0' || '13.0' }}
            DYLD_LIBRARY_PATH=/usr/local/opt/gcc/lib/gcc/current/:$DYLD_LIBRARY_PATH
            FC=gfortran-14
            HDF5_ROOT=$(brew --prefix hdf5)

          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest tests/test_simsopt_compat.py && pytest tests/test_simsopt_vmec_ported.py
        with:
          package-dir: .
          output-dir: wheelhouse
          config-file: "{package}/pyproject.toml"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: vmecpp-wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  make-sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Optional, use if you use setuptools_scm
        submodules: true  # Optional, use if you have submodules

    - name: Build SDist
      run: pipx run build --sdist

    - name: Move Files
      run: mv dist wheelhouse

    - name: Upload SDist
      uses: actions/upload-artifact@v4
      with:
        name: vmecpp-sdist
        path: ./wheelhouse/*.tar.gz

  pypi-publish:
    name: Publish wheels to PyPI
    if: github.event_name == 'release'
    needs: [main, make-sdist]
    runs-on: ubuntu-latest
    environment:
        name: pypi
    permissions:
        id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: wheelhouse

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
