# VMEC++ Symmetric Mode Regression - Complete Analysis & Resolution

## Final Summary

**RESOLVED**: Symmetric mode convergence regression identified, fixed, and validated.

### Issue
Commit 622db12 "Implement asymmetric Fourier transforms for VMEC++" broke symmetric mode (LASYM=F) convergence due to incorrect variable usage in `deAliasConstraintForce` function.

### Resolution
Applied targeted fix by reverting `deAliasConstraintForce` function in `ideal_mhd_model.cc` to upstream/main implementation, restoring symmetric mode functionality while preserving asymmetric capabilities.

## Bisect Results - Original Regression

### Good Commit (upstream/main)
- Commit: f0f7059 "Improved Sphinx docs (Cleaned up docstrings and config)"
- Status: CONVERGES SUCCESSFULLY
- Test results: 4/5 input files successful (80% success rate)
- Key working inputs: solovev, cma, li383_low_res, solovev_analytical

### First Bad Commit
- Commit: 622db12 "Implement asymmetric Fourier transforms for VMEC++"
- Status: FAILS TO CONVERGE
- Root cause: Incorrect variable usage (w2/w3 instead of w0/w1) and swapped basis functions (sinmu/cosmu) in symmetric mode

## Golden Record - Symmetric Mode Behavior

### Baseline (upstream/main)
**Test case**: circular_tokamak (LASYM=F, MPOL=8, NTOR=0, NFP=1)
- ‚úÖ Status: SUCCESS
- üéØ **Golden MHD Energy**: 172.39494071067568
- Convergence: Clean convergence without errors

### Before Fix (broken main)
**Test case**: circular_tokamak
- ‚ùå Status: FAILED
- Error: "VMEC++ did not converge"
- MHD Energy: 6.806159e+03 (incorrect)

### After Fix (current main)
**Test case**: circular_tokamak
- ‚úÖ Status: SUCCESS
- üéØ **MHD Energy**: 172.39494071067568 (**MATCHES GOLDEN RECORD**)
- Verification: Regression test passes with exact energy match

## Root Cause Analysis

### Identified Issue
Function `deAliasConstraintForce` in `ideal_mhd_model.cc:687-714` had incorrect implementation for symmetric cases:

**Broken code (asymmetric implementation):**
```cpp
// Line ~697: Wrong variables used
w2 += m_gsc[n] * fb.cosnv[idx_kn];  // Should be w0
w3 += m_gcs[n] * fb.sinnv[idx_kn];  // Should be w1

// Line ~709: Wrong basis functions
m_gCon[idx_kl] += faccon[m] * (w2 * fb.cosmu[idx_ml] + w3 * fb.sinmu[idx_ml]);
// Should be: (w0 * fb.sinmu[idx_ml] + w1 * fb.cosmu[idx_ml])
```

**Fixed code (upstream/main implementation):**
```cpp
// Line ~697: Correct variables
w0 += m_gsc[n] * fb.cosnv[idx_kn];
w1 += m_gcs[n] * fb.sinnv[idx_kn];

// Line ~709: Correct basis functions
m_gCon[idx_kl] += faccon[m] * (w0 * fb.sinmu[idx_ml] + w1 * fb.cosmu[idx_ml]);
```

### Impact
- Symmetric cases (LASYM=F) used wrong variables and basis function combinations
- Asymmetric implementation inadvertently broke working symmetric logic
- Violated critical constraint: symmetric behavior must remain unchanged

## Verification Results

### Upstream/Main Validation
**Tested on**: commit f0f7059 (upstream/main)
- üìä **Results**: 4/5 input files successful (80% success rate)
- ‚úÖ **solovev**: MHD Energy = 6.455075e-02
- ‚úÖ **cma**: MHD Energy = 1.139122e-03
- ‚úÖ **li383_low_res**: MHD Energy = 9.601574e-02
- ‚úÖ **solovev_analytical**: MHD Energy = 7.312741e-01
- ‚ùå **test_asymmetric**: File not found (expected - asymmetric input doesn't exist in upstream)

### Fixed Main Branch Validation
**Tested on**: current main (after fix)
- ‚úÖ **Symmetric test**: circular_tokamak passes with golden record match
- ‚úÖ **Asymmetric test**: Asymmetric functionality preserved and working
- ‚úÖ **Regression test**: `test_symmetric_regression.py` passes

## Fix Implementation Details

### Files Modified
- `src/vmecpp/cpp/vmecpp/vmec/ideal_mhd_model/ideal_mhd_model.cc` (lines 687-714)

### Strategy
1. **Surgical revert**: Only reverted the broken `deAliasConstraintForce` function
2. **Preserved asymmetric**: Kept all other asymmetric functionality intact
3. **Minimal impact**: No changes to asymmetric transform implementations
4. **Verified compatibility**: Confirmed both symmetric and asymmetric modes work

### Git History
- **hotfix/symmetric-regression-fix**: Feature branch for the fix
- **Commit 7bdd77f**: "HOTFIX: Restore working symmetric mode by reverting to upstream/main"
- **Merged to main**: Fix successfully integrated

## Current Status

### ‚úÖ RESOLVED SUCCESSFULLY

1. **‚úÖ Regression identified**: Bisect traced to commit 622db12
2. **‚úÖ Root cause found**: Incorrect variable usage in `deAliasConstraintForce`
3. **‚úÖ Fix implemented**: Surgical revert to upstream/main logic
4. **‚úÖ Fix verified**: Golden record test passes exactly
5. **‚úÖ Asymmetric preserved**: Both modes working correctly
6. **‚úÖ Documentation complete**: Full analysis and outcome documented

### Verification Commands
```bash
# Test symmetric mode (should pass with golden energy)
python test_symmetric_regression.py

# Test comprehensive input suite
python test_all_inputs.py

# Test upstream baseline
git checkout upstream/main && python test_upstream_summary.py
```

### Critical Constraint Satisfied
**üö® SYMMETRIC BEHAVIOR PRESERVATION**: ‚úÖ VERIFIED
- Symmetric mode (lasym=false) now works identically to upstream/main
- No regression in symmetric functionality
- Asymmetric functionality preserved and working

## Lessons Learned

1. **Careful testing**: Asymmetric implementations must be thoroughly tested against symmetric baselines
2. **Preserve working code**: When adding features, ensure existing functionality remains unchanged
3. **Golden records**: Essential for regression detection and verification
4. **Surgical fixes**: Minimal changes reduce risk of introducing new issues
5. **Comprehensive validation**: Test both affected and unaffected functionality

---

**Resolution Date**: 2025-07-21
**Status**: CLOSED - Successfully resolved
**Next Action**: Verification bisect to confirm fix completeness
